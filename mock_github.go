// Code generated by MockGen. DO NOT EDIT.
// Source: github.go

// Package mikku is a generated GoMock package.
package mikku

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v28/github"
	reflect "reflect"
)

// MockGitHubRepositoriesClient is a mock of GitHubRepositoriesClient interface
type MockGitHubRepositoriesClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubRepositoriesClientMockRecorder
}

// MockGitHubRepositoriesClientMockRecorder is the mock recorder for MockGitHubRepositoriesClient
type MockGitHubRepositoriesClientMockRecorder struct {
	mock *MockGitHubRepositoriesClient
}

// NewMockGitHubRepositoriesClient creates a new mock instance
func NewMockGitHubRepositoriesClient(ctrl *gomock.Controller) *MockGitHubRepositoriesClient {
	mock := &MockGitHubRepositoriesClient{ctrl: ctrl}
	mock.recorder = &MockGitHubRepositoriesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitHubRepositoriesClient) EXPECT() *MockGitHubRepositoriesClientMockRecorder {
	return m.recorder
}

// CreateRelease mocks base method
func (m *MockGitHubRepositoriesClient) CreateRelease(ctx context.Context, owner, repo string, release *github.RepositoryRelease) (*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelease", ctx, owner, repo, release)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRelease indicates an expected call of CreateRelease
func (mr *MockGitHubRepositoriesClientMockRecorder) CreateRelease(ctx, owner, repo, release interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelease", reflect.TypeOf((*MockGitHubRepositoriesClient)(nil).CreateRelease), ctx, owner, repo, release)
}

// GetLatestRelease mocks base method
func (m *MockGitHubRepositoriesClient) GetLatestRelease(ctx context.Context, owner, repo string) (*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestRelease", ctx, owner, repo)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestRelease indicates an expected call of GetLatestRelease
func (mr *MockGitHubRepositoriesClientMockRecorder) GetLatestRelease(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRelease", reflect.TypeOf((*MockGitHubRepositoriesClient)(nil).GetLatestRelease), ctx, owner, repo)
}

// MockGitHubPullRequestsClient is a mock of GitHubPullRequestsClient interface
type MockGitHubPullRequestsClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubPullRequestsClientMockRecorder
}

// MockGitHubPullRequestsClientMockRecorder is the mock recorder for MockGitHubPullRequestsClient
type MockGitHubPullRequestsClientMockRecorder struct {
	mock *MockGitHubPullRequestsClient
}

// NewMockGitHubPullRequestsClient creates a new mock instance
func NewMockGitHubPullRequestsClient(ctrl *gomock.Controller) *MockGitHubPullRequestsClient {
	mock := &MockGitHubPullRequestsClient{ctrl: ctrl}
	mock.recorder = &MockGitHubPullRequestsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitHubPullRequestsClient) EXPECT() *MockGitHubPullRequestsClientMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockGitHubPullRequestsClient) List(ctx context.Context, owner, repo string, opt *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, owner, repo, opt)
	ret0, _ := ret[0].([]*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List
func (mr *MockGitHubPullRequestsClientMockRecorder) List(ctx, owner, repo, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGitHubPullRequestsClient)(nil).List), ctx, owner, repo, opt)
}
