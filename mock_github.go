// Code generated by MockGen. DO NOT EDIT.
// Source: github.go

// Package mikku is a generated GoMock package.
package mikku

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v32/github"
)

// MockgitHubRepositoriesClient is a mock of gitHubRepositoriesClient interface
type MockgitHubRepositoriesClient struct {
	ctrl     *gomock.Controller
	recorder *MockgitHubRepositoriesClientMockRecorder
}

// MockgitHubRepositoriesClientMockRecorder is the mock recorder for MockgitHubRepositoriesClient
type MockgitHubRepositoriesClientMockRecorder struct {
	mock *MockgitHubRepositoriesClient
}

// NewMockgitHubRepositoriesClient creates a new mock instance
func NewMockgitHubRepositoriesClient(ctrl *gomock.Controller) *MockgitHubRepositoriesClient {
	mock := &MockgitHubRepositoriesClient{ctrl: ctrl}
	mock.recorder = &MockgitHubRepositoriesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockgitHubRepositoriesClient) EXPECT() *MockgitHubRepositoriesClientMockRecorder {
	return m.recorder
}

// CreateRelease mocks base method
func (m *MockgitHubRepositoriesClient) CreateRelease(ctx context.Context, owner, repo string, release *github.RepositoryRelease) (*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelease", ctx, owner, repo, release)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRelease indicates an expected call of CreateRelease
func (mr *MockgitHubRepositoriesClientMockRecorder) CreateRelease(ctx, owner, repo, release interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelease", reflect.TypeOf((*MockgitHubRepositoriesClient)(nil).CreateRelease), ctx, owner, repo, release)
}

// GetLatestRelease mocks base method
func (m *MockgitHubRepositoriesClient) GetLatestRelease(ctx context.Context, owner, repo string) (*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestRelease", ctx, owner, repo)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestRelease indicates an expected call of GetLatestRelease
func (mr *MockgitHubRepositoriesClientMockRecorder) GetLatestRelease(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRelease", reflect.TypeOf((*MockgitHubRepositoriesClient)(nil).GetLatestRelease), ctx, owner, repo)
}

// GetContents mocks base method
func (m *MockgitHubRepositoriesClient) GetContents(ctx context.Context, owner, repo, path string, opt *github.RepositoryContentGetOptions) (*github.RepositoryContent, []*github.RepositoryContent, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContents", ctx, owner, repo, path, opt)
	ret0, _ := ret[0].(*github.RepositoryContent)
	ret1, _ := ret[1].([]*github.RepositoryContent)
	ret2, _ := ret[2].(*github.Response)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetContents indicates an expected call of GetContents
func (mr *MockgitHubRepositoriesClientMockRecorder) GetContents(ctx, owner, repo, path, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContents", reflect.TypeOf((*MockgitHubRepositoriesClient)(nil).GetContents), ctx, owner, repo, path, opt)
}

// UpdateFile mocks base method
func (m *MockgitHubRepositoriesClient) UpdateFile(ctx context.Context, owner, repo, path string, opt *github.RepositoryContentFileOptions) (*github.RepositoryContentResponse, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFile", ctx, owner, repo, path, opt)
	ret0, _ := ret[0].(*github.RepositoryContentResponse)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateFile indicates an expected call of UpdateFile
func (mr *MockgitHubRepositoriesClientMockRecorder) UpdateFile(ctx, owner, repo, path, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFile", reflect.TypeOf((*MockgitHubRepositoriesClient)(nil).UpdateFile), ctx, owner, repo, path, opt)
}

// MockgitHubPullRequestsClient is a mock of gitHubPullRequestsClient interface
type MockgitHubPullRequestsClient struct {
	ctrl     *gomock.Controller
	recorder *MockgitHubPullRequestsClientMockRecorder
}

// MockgitHubPullRequestsClientMockRecorder is the mock recorder for MockgitHubPullRequestsClient
type MockgitHubPullRequestsClientMockRecorder struct {
	mock *MockgitHubPullRequestsClient
}

// NewMockgitHubPullRequestsClient creates a new mock instance
func NewMockgitHubPullRequestsClient(ctrl *gomock.Controller) *MockgitHubPullRequestsClient {
	mock := &MockgitHubPullRequestsClient{ctrl: ctrl}
	mock.recorder = &MockgitHubPullRequestsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockgitHubPullRequestsClient) EXPECT() *MockgitHubPullRequestsClientMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockgitHubPullRequestsClient) List(ctx context.Context, owner, repo string, opt *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, owner, repo, opt)
	ret0, _ := ret[0].([]*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List
func (mr *MockgitHubPullRequestsClientMockRecorder) List(ctx, owner, repo, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockgitHubPullRequestsClient)(nil).List), ctx, owner, repo, opt)
}

// Create mocks base method
func (m *MockgitHubPullRequestsClient) Create(ctx context.Context, owner, repo string, pull *github.NewPullRequest) (*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, owner, repo, pull)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create
func (mr *MockgitHubPullRequestsClientMockRecorder) Create(ctx, owner, repo, pull interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockgitHubPullRequestsClient)(nil).Create), ctx, owner, repo, pull)
}

// MockgitHubGitClient is a mock of gitHubGitClient interface
type MockgitHubGitClient struct {
	ctrl     *gomock.Controller
	recorder *MockgitHubGitClientMockRecorder
}

// MockgitHubGitClientMockRecorder is the mock recorder for MockgitHubGitClient
type MockgitHubGitClientMockRecorder struct {
	mock *MockgitHubGitClient
}

// NewMockgitHubGitClient creates a new mock instance
func NewMockgitHubGitClient(ctrl *gomock.Controller) *MockgitHubGitClient {
	mock := &MockgitHubGitClient{ctrl: ctrl}
	mock.recorder = &MockgitHubGitClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockgitHubGitClient) EXPECT() *MockgitHubGitClientMockRecorder {
	return m.recorder
}

// GetRef mocks base method
func (m *MockgitHubGitClient) GetRef(ctx context.Context, owner, repo, ref string) (*github.Reference, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRef", ctx, owner, repo, ref)
	ret0, _ := ret[0].(*github.Reference)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRef indicates an expected call of GetRef
func (mr *MockgitHubGitClientMockRecorder) GetRef(ctx, owner, repo, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRef", reflect.TypeOf((*MockgitHubGitClient)(nil).GetRef), ctx, owner, repo, ref)
}

// CreateRef mocks base method
func (m *MockgitHubGitClient) CreateRef(ctx context.Context, owner, repo string, ref *github.Reference) (*github.Reference, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRef", ctx, owner, repo, ref)
	ret0, _ := ret[0].(*github.Reference)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRef indicates an expected call of CreateRef
func (mr *MockgitHubGitClientMockRecorder) CreateRef(ctx, owner, repo, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRef", reflect.TypeOf((*MockgitHubGitClient)(nil).CreateRef), ctx, owner, repo, ref)
}
